use solana_program::{
    instruction::{AccountMeta, Instruction},
    pubkey::Pubkey,
};

#[derive(Debug, Clone, Copy)]
pub struct SrcDstLstSolValueCalcKeys<
    SK: Into<[AccountMeta; SN]>,
    const SN: usize,
    DK: Into<[AccountMeta; DN]>,
    const DN: usize,
> {
    pub src_lst_calculator_program_id: Pubkey,
    pub dst_lst_calculator_program_id: Pubkey,
    pub src_lst_keys: SK,
    pub dst_lst_keys: DK,
}

#[derive(Debug, Clone, Copy)]
pub struct SrcDstLstSolValueCalcExtendCount {
    pub src_lst: u8,
    pub dst_lst: u8,
}

/// `sol_value_calculator_keys` should be a `&<>Keys` type generated by solores
///
/// Returns number of accounts added to the instruction's accounts array
pub fn ix_extend_with_sol_value_calculator_accounts<K: Into<[AccountMeta; N]>, const N: usize>(
    ix: &mut Instruction,
    sol_value_calculator_keys: K,
    sol_value_calculator_program_id: Pubkey,
) -> u8 {
    ix.accounts.push(AccountMeta {
        pubkey: sol_value_calculator_program_id,
        is_signer: false,
        is_writable: false,
    });
    let metas: [AccountMeta; N] = sol_value_calculator_keys.into();
    // exclude first account since that should be LST mint
    ix.accounts.extend(metas.into_iter().skip(1));
    N.try_into().unwrap()
}

pub fn ix_extend_with_src_dst_sol_value_calculator_accounts<
    SK: Into<[AccountMeta; SN]>,
    const SN: usize,
    DK: Into<[AccountMeta; DN]>,
    const DN: usize,
>(
    ix: &mut Instruction,
    SrcDstLstSolValueCalcKeys {
        src_lst_calculator_program_id,
        dst_lst_calculator_program_id,
        src_lst_keys,
        dst_lst_keys,
    }: SrcDstLstSolValueCalcKeys<SK, SN, DK, DN>,
) -> SrcDstLstSolValueCalcExtendCount {
    let src_lst = ix_extend_with_sol_value_calculator_accounts(
        ix,
        src_lst_keys,
        src_lst_calculator_program_id,
    );
    let dst_lst = ix_extend_with_sol_value_calculator_accounts(
        ix,
        dst_lst_keys,
        dst_lst_calculator_program_id,
    );
    SrcDstLstSolValueCalcExtendCount { src_lst, dst_lst }
}
